/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compiladores;

import compiladores.SymbolTable.Values;
import static compiladores.Tokenizer.TokenType;
import static compiladores.Tokenizer.TokenType.ID;
import static compiladores.Tokenizer.TokenType.BOOL;
import static compiladores.Tokenizer.TokenType.ID;
import static compiladores.Tokenizer.TokenType.DOUBLERESERVED;
import static compiladores.Tokenizer.TokenType.INT; 
import static compiladores.Tokenizer.TokenType.STRINGRESERVED;
import static compiladores.Tokenizer.TokenType.CONST;
import static compiladores.Tokenizer.TokenType.SYSEMICOLON;
import static compiladores.Tokenizer.TokenType.SYEQUALS;
import static compiladores.Tokenizer.TokenType.DOUBLE;
import static compiladores.Tokenizer.TokenType.HEXA;
import static compiladores.Tokenizer.TokenType.DECIMAL;
import static compiladores.Tokenizer.TokenType.STRING;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author diego
 */
public class FrmPrimary extends javax.swing.JFrame {
 String NombreArchivo=null;
    /**
     * Creates new form NewJFrame
     */
    public FrmPrimary() {
        initComponents();
    }
String path;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        javax.swing.JButton btnBrowser = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txta_output = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txta_input = new javax.swing.JTextArea();
        txtPath = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jButton2.setText("Analizar");
        jButton2.setToolTipText("");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnBrowser.setText("Browser");
        btnBrowser.setName(""); // NOI18N
        btnBrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowserActionPerformed(evt);
            }
        });

        txta_output.setEditable(false);
        txta_output.setColumns(20);
        txta_output.setRows(5);
        jScrollPane1.setViewportView(txta_output);

        txta_input.setEditable(false);
        txta_input.setColumns(20);
        txta_input.setRows(5);
        jScrollPane2.setViewportView(txta_input);

        txtPath.setEditable(false);

        jLabel1.setText("INPUT");

        jLabel2.setText("ERRORS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jScrollPane2)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(168, 168, 168))
            .addGroup(layout.createSequentialGroup()
                .addGap(213, 213, 213)
                .addComponent(btnBrowser)
                .addGap(18, 18, 18)
                .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(157, 157, 157)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(323, 323, 323))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBrowser)
                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(jButton2)))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowserActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode( JFileChooser.FILES_AND_DIRECTORIES);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", 
                "txt", "text","frag");
        fc.setFileFilter(filter);
        if( fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION ){
           txtPath.setText("");
           path = fc.getSelectedFile().getName();
           txtPath.setText(fc.getSelectedFile().getAbsolutePath());
          
          
           txta_input.setText("");
           jButton2.setEnabled(true);
           read();            
        }
    }//GEN-LAST:event_btnBrowserActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       String analizedFile = "";
        txta_output.setText("");
        ArrayList<Tokenizer.Token> tokens = Lexer.lex(txta_input.getText());
        ArrayList<Tokenizer.Token> tokensList = Lexer.lex(txta_input.getText());
            txta_output.append("***TOKENIZER ERRORS**\n");
        for (Tokenizer.Token token : tokens){
            analizedFile = analizedFile +  "***TOKENIZER ERRORS**\n";
             analizedFile = analizedFile + "\n" +token.toString();         
            if(token.type.name() == "ERROR"  | token.type.name() =="UNCLOSEDSTRING"
                   | token.type.name() == "UNCLOSEDCOMMENT" | token.type.name() == "UNOPENEDCOMMENT" ){
                txta_output.append(token.toString()+ "\n\n");
            }else if(token.type.name() == "ID" && token.data.length() == 31 )
                txta_output.append(token.toString()+ "\n\n");
        }
        Parse parse = new Parse();
          /*  ArrayList<String> parser = parse.parse(tokens);
        if(!parser.isEmpty()){
            txta_output.append("\n\n\n***PARSER ERRORS***\n");
            analizedFile = analizedFile + "\n\n\n" + "***PARSER ERRORS***";
        }
        for (String parserErrors : parser){
            analizedFile = analizedFile + "\n" + parserErrors;
            txta_output.append(parserErrors + "\n");
        }*/
        createSymTable(tokensList);
        
        
        
        
        write(analizedFile, "");
    }//GEN-LAST:event_jButton2ActionPerformed
private void read() {
        File file = null;
        FileReader fr = null;
        BufferedReader br = null;
        try {
			// Apertura del fichero y creacion de BufferedReader para poder
			// hacer una lectura comoda (disponer del metodo readLine()).
                        file = new File (txtPath.getText());
			//archivo = new File(txtPath.getText());
                        NombreArchivo=file.getName();
                        NombreArchivo=NombreArchivo.replace(".txt", "");
                        fr = new FileReader (file);
			br = new BufferedReader(fr);
			// Lectura del fichero
			String linea;
			while((linea=br.readLine())!=null)
				txta_input.append(linea + '\n');           
        }
        catch(Exception e){
           e.printStackTrace();
        }finally{
           // En el finally cerramos el fichero, para asegurarnos
           // que se cierra tanto si todo va bien como si salta 
           // una excepcion.
           try{
              if( null != fr ){
                 fr.close();
              }
           }catch (Exception e2){
              e2.printStackTrace();
           }
        }
    }
private void hashTable(){
    
}
private void write(String analizedFile, String file) {
    File fichero;
    if (file == "table") {
        fichero=new File(NombreArchivo+".txt");//creando fichero txt en rai
    }else   
        fichero=new File(NombreArchivo+".out");//creando fichero txt en raiz
    
        PrintWriter writer;
        try{
            writer=new PrintWriter(fichero);
            writer.print(analizedFile);//ingresado ecuacion
            writer.close();
            JOptionPane.showMessageDialog(null, 
                    "InfoBox: Se ha analizado con éxito el archivo y se ha "
                            + "creado un archivo de salida en la carpeta raíz llamado "
                            +NombreArchivo, "¡ATENCIÓN!",JOptionPane.INFORMATION_MESSAGE);
        }
        catch(FileNotFoundException ex){
           JOptionPane.showMessageDialog(null, 
                    "Se produjo un error al intentar escribir el archivo de salida", "¡ATENCIÓN!",JOptionPane.INFORMATION_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrimary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrimary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrimary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrimary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrimary().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtPath;
    private javax.swing.JTextArea txta_input;
    private javax.swing.JTextArea txta_output;
    // End of variables declaration//GEN-END:variables

    private void createSymTable(ArrayList<Tokenizer.Token> tokensList) {
        SymbolTable symTable = new SymbolTable();
        for (int i = 0; i < tokensList.size()-3 ; i++) {
            if ( tokensList.get(i).type == CONST && (tokensList.get(i+1).type == INT || tokensList.get(i+1).type == DOUBLERESERVED || tokensList.get(i+1).type == BOOL ||
        tokensList.get(i+1).type == STRINGRESERVED) && tokensList.get(i+2).type == ID  && tokensList.get(i+3).type == SYSEMICOLON) {
                Values value = new Values(tokensList.get(i+1).type.toString(),"CONSTANT","NULL");
                symTable.symTable.put(tokensList.get(i+2).data.toString() ,value);
                for (int j = 0; j < 4; j++) {
                    tokensList.remove(i);
                    
                }
                i=-1;
               
            }
        }
        for (int i = 0; i < tokensList.size()-2 ; i++) {
            if ((tokensList.get(i).type == INT || tokensList.get(i).type == DOUBLERESERVED || tokensList.get(i).type == BOOL ||
        tokensList.get(i).type == STRINGRESERVED) && tokensList.get(i+1).type == ID  && tokensList.get(i+2).type == SYSEMICOLON) {
                Values value = new Values(tokensList.get(i).type.toString(),"VARIABLE", "NULL");
                symTable.symTable.put(tokensList.get(i+1).data,value);
                for (int j = 0; j < 3; j++) {
                    tokensList.remove(i);
                }
                i=-1;
            }
        }
        for (int i = 0; i < tokensList.size()-3; i++) {
            if (tokensList.get(i).type == ID  && tokensList.get(i+1).type ==SYEQUALS && (tokensList.get(i+2).type == STRING || 
            tokensList.get(i+2).type ==DOUBLE || tokensList.get(i+2).type == HEXA || tokensList.get(i+2).type == DECIMAL )&& tokensList.get(i+3).type == SYSEMICOLON) {
                if (symTable.symTable.containsKey(tokensList.get(i).data)) {
                    Values value = new Values(symTable.symTable.get(tokensList.get(i).data).type,symTable.symTable.get(tokensList.get(i).data).attribute, tokensList.get(i+2).data);
                    symTable.symTable.replace(tokensList.get(i).data, value);
                    for (int j = 0; j < 4; j++) {
                        tokensList.remove(i);
                    }
                }
            }
        }
        String line="";
        Values valueTemp = new Values();
        String key = null;

     List<String> list = new ArrayList<String>();
     list.add("|VARIABLE  |TYPE           |ATTRIBUTE |VALOR     |\n");
            symTable.symTable.forEach(new BiConsumer<String, Values>() {
            @Override
            public void accept(String key, Values ValueTemp) {
                list.add(String.format("|%-10s|%-15s|%-10s|%-10s|\n", key,ValueTemp.type, ValueTemp.attribute, ValueTemp.value ));
            }
        });
        for (int i = 0; i < list.size(); i++) {
            line += list.get(i);
        }
        write(line,"table");
    }
}
